#%Validation Profile 1.0

profile: Anypoint Security Best Practices

# https://apisecurity.io/encyclopedia/content/oasv3/security/security

description: |
  The starting point for the API security is the API definition itself. If the API definition has gaping security holes,
  applying security measures on top of that just creates a ticking time bomb. The first step is to make sure your API
  conforms to security best practices.

  API definitions have security components on both global and operation level. Global components are at the top level
  and apply to the whole API. Operation-level components apply only to the individual API operations in question.

  Most of the global components are only available at the global level. Some, like the security component, can also
  exist on the operation level. The global level component provides the default behavior. On the operation level, you
  can override the global component and provide a specific exception to the behavior.

violation:
  - security-fields-operation-empty #working for both
  - access-tokens-oauth2-cleartext # TODO: not working for raml when defining invalid base Uri
  - insecure-oauth2-grants # TODO: not working for raml when using insecure grants
  - api-keys-in-cookie
  - api-keys-in-query
  - api-keys-in-header
  - api-negotiates-authentication
  - insecure-basic-auth # TODO not working for raml, raml does not have server in operation
  - bearer-token-cleartext # for the validations checking cleartext, if server is not defined validation is not triggered.
  - http-token-cleartext
  - oauth1-deprecated # TODO is not triggered in raml
  - oauth2-redirections-non-encrypted #working for both
  - unknown-security-scheme
  - valid-server-urltemplate # working for both (can improve location for raml)
  - valid-oauth2-redirection-urls # working for both
  #- matching-oauth2-scopes is validated by amf

validations:

  security-fields-operation-empty:
    message: |
      The security field of the operation has not been defined. This field specifies if your API operation requires the API consumer to authenticate to use it.
      Possible exploit scenario:
      Anyone can use the API operations that do not have a security field defined. All they need to know is the URL for the API operation and how to invoke it.

    targetClass: apiContract.Operation
    propertyConstraints:
      security.security:
        minCount: 1

  access-tokens-oauth2-cleartext:
    message: |
      Access tokens from authorization code grant flow are transported in the clear over an unencrypted channel.
      Attackers can easily intercept API calls and retrieve the unencrypted tokens. They can then use the tokens to make
      other API calls.
    targetClass: apiContract.Operation
    if:
      propertyConstraints:
        security.security / security.schemes / security.scheme / security.type :
          pattern: "OAuth 2.0"
    then:
      propertyConstraints:
        apiContract.server / core.urlTemplate:
          pattern: "^https:.*$"

  insecure-oauth2-grants:
    message: OAuth2 implicit and resource owner password grant are insecure and should be avoided
    targetClass: security.OAuth2Flow
    not:
      propertyConstraints:
        security.flow:
          in:
            - implicit
            - password

  api-keys-in-cookie:
    message: |
      The API accepts API keys that are transported in a header over the network. The credentials are sent over the
      network on each API call, over and over again, and are exposed to attack attempts to retrieve them.
    targetClass: security.SecurityScheme
    not:
      propertyConstraints:
        security.settings / security.in:
          pattern: cookie

  api-keys-in-query:
    message: |
      The API accepts API keys that are transported in query parameters over the network. The credentials are sent over
      the network on each API call, over and over again, and are exposed to attack attempts to retrieve them. In addition,
      the API key could end up being visible in the logs that web servers and proxies produce on URLs.
    targetClass: security.SecurityScheme
    not:
      propertyConstraints:
        security.settings / security.in:
          pattern: query

  api-keys-in-header:
    message: |
      Your API accepts API keys sent in cleartext in a header over an unencrypted channel. Attackers can easily intercept
      API calls and retrieve the credentials. They can then use the credentials to make other API calls.
    targetClass: apiContract.Operation
    if:
      propertyConstraints:
        security.security / security.schemes / security.scheme / security.settings / security.in:
          pattern: header
    then:
      propertyConstraints:
        apiContract.server / core.urlTemplate:
          pattern: "^https:.*$"

  api-negotiates-authentication:
    message: |
      API negotiates authentication with a remote Simple And Protected Negotiate (SPNEGO) -based system.

      The most common systems used in negotiating authentication are Kerberos and the now obsolete NTLM (New Technology LAN Manager). The severity of this risk heavily depends on the which system is used: while Kerberos is reasonably secure, NTLM is not.
      Because your API cannot know which system it is negotiating with, the only safe option is to assume the worst and treat all negotiation as not being secure.

      Use a more secure authentication method, like OAuth 2.0. It uses access tokens with limited lifetime and authorizations (the scopes) granted that the resource owner grants from an authorization server.
    targetClass: security.SecurityScheme
    not:
      propertyConstraints:
        security.settings / security.scheme:
          pattern: negotiate

  insecure-basic-auth:
    message: |
      Your API accepts basic authentication credentials sent in cleartext over an unencrypted channel. Attackers can
      easily intercept API calls and retrieve the credentials. They can then use the credentials to make other API calls.
    targetClass: apiContract.Operation
    if:
      propertyConstraints:
        security.security / security.schemes / security.scheme:
          nested:
            and:
              - propertyConstraints:
                  security.type :
                    pattern: "http"
              - propertyConstraints:
                  security.settings / security.scheme:
                    pattern: "basic"
    then:
      propertyConstraints:
        apiContract.server / core.urlTemplate:
          pattern: "^https:.*$"

  bearer-token-cleartext:
    message: |
      Bearer tokens from OAuth 2.0 authorization flows are transported in the clear over an unencrypted channel.
      Attackers can easily intercept API calls and retrieve the unencrypted tokens. They can then use the tokens to
      make other API calls.
    targetClass: apiContract.Operation
    if:
      propertyConstraints:
        security.security / security.schemes / security.scheme:
          nested:
            and:
              - propertyConstraints:
                  security.type :
                    pattern: "http"
              - propertyConstraints:
                  security.settings / security.scheme:
                    pattern: "bearer"
    then:
      propertyConstraints:
        apiContract.server / core.urlTemplate :
          pattern: "^https:.*$"

  http-token-cleartext:
    message: |
      API accepts credentials sent in cleartext over an unencrypted channel for a secure alternative HTTP authentication method included in IANA Authentication Scheme Registry.

      These schemes aim to address the shortcomings of Basic and Digest authentication and include the following:

          HTTP Origin-Bound Authentication (HOBA) (RFC 7486)
          Mutual Authentication Protocol for HTTP (RFC 8120)
          Salted Challenge Response HTTP Authentication Mechanism (SCRAM) (RFC 7804)
              SCRAM-SHA-1
              SCRAM-SHA-256
          Voluntary Application Server Identification (VAPID) for Web Push (RFC 8292)

      Attackers can easily intercept API calls and retrieve the unencrypted tokens. They can then use the tokens to make other API calls.
    targetClass: apiContract.Operation
    if:
      propertyConstraints:
        security.security / security.schemes / security.scheme:
          nested:
            and:
              - propertyConstraints:
                  security.type :
                    pattern: "http"
              - propertyConstraints:
                  security.settings / security.scheme:
                    in:
                      - hoba
                      - mutual
                      - scram-sha-1
                      - SCRAM-SHA-1
                      - scram-sha-256
                      - SCRAM-SHA-256
                      - vapid
                      - digest
    then:
      propertyConstraints:
        apiContract.server / core.urlTemplate :
          pattern: "^https:.*$"

  oauth1-deprecated:
    message: |
      One or more global security schemes in your API allows using OAuth 1.0 authentication.

      This is a potential risk, because the definition is in security schemes. However, it easily turns into an actual
      risk when the unsafe method is used in a security requirement.
    targetClass: security.SecurityScheme
    not:
      propertyConstraints:
        security.settings / security.scheme:
          pattern: oauth

  oauth2-redirections-non-encrypted:
    message: Oauth2 redirection flows use non encrypted transport
    targetClass: security.OAuth2Flow
    and:
      - propertyConstraints:
          security.accessTokenUri:
            pattern: "^https:.*$"
      - propertyConstraints:
          security.authorizationUri:
            pattern: "^https:.*$"

  unknown-security-scheme:
    message: |
      One or more global security schemes in your API allows setting HTTP authentication methods that are not included
      in IANA Authentication Scheme Registry.

      This is a potential risk, because the definition is in security schemes. However, it easily turns into an actual
      risk when the unsafe method is used in a security requirement.
    targetClass: security.SecurityScheme
    if:
      propertyConstraints:
        security.type:
          in:
            - http
    then:
      propertyConstraints:
        security.settings / security.scheme:
          in:
            - basic
            - bearer
            - digest
            - hoba
            - mutual
            - scram-sha-1
            - SCRAM-SHA-1
            - scram-sha-256
            - SCRAM-SHA-256
            - vapid
            - negotiate
            - oauth

  valid-server-urltemplate:
    message: |
      The API accepts basic credentials transported over the network. All URLs in the API contract must be proper URLs in a valid format.
    targetClass: apiContract.Server
    propertyConstraints:
      core.urlTemplate:
        pattern: "^(https?:\\\\/\\\\/)?[-A-Za-z0-9+&@#\\\\/%?=~_|!:,.;\\\\{\\\\}]+[-A-Za-z0-9+&@#\\\\/%=~_|\\\\{\\\\}]$"

  valid-oauth2-redirection-urls:
    message: |
      The API accepts basic credentials transported over the network. All URLs in the API contract must be proper URLs in a valid format.
    targetClass: security.OAuth2Flow
    and:
      - propertyConstraints:
          security.accessTokenUri:
            pattern: "^(https?:\\\\/\\\\/)?[-A-Za-z0-9+&@#\\\\/%?=~_|!:,.;]+[-A-Za-z0-9+&@#\\\\/%=~_|]$"
      - propertyConstraints:
          security.authorizationUri:
            pattern: "^(https?:\\\\/\\\\/)?[-A-Za-z0-9+&@#\\\\/%?=~_|!:,.;]+[-A-Za-z0-9+&@#\\\\/%=~_|]$"