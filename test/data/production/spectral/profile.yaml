#%Validation Profile 1.0

profile: Spectral Base

violation:
  - operation-2xx-response
  - operation-operationId-unique
  - operation-parameters
  - path-params
  - info-contact
  - info-description
  - info-license
  - license-url
  - no-eval-in-markdown
  - no-script-tags-in-markdown
  - openapi-tags
  - operation-default-response
  - operation-description
  - operation-operationId
  - operation-tags

warning:
  - operation-singular-tag

validations:

  operation-2xx-response:
    message: |
      Operation must have at least one 2xx response. Any API operation (endpoint) can fail but presumably it is also
      meant to do something constructive at some point. If you forget to write out a success case for this API, then
      this rule will let you know.
    targetClass: apiContract.Operation
    propertyConstraints:
      apiContract.returns:
        atLeast:
          count: 1
          validation:
            propertyConstraints:
              apiContract.statusCode:
                pattern: "2[0-9][0-9]"

  # automatically enforced by AMF
  operation-operationId-unique:
    message: |
      Every operation must have a unique operationId.

      Why? A lot of documentation systems use this as an identifier, some SDK generators convert them to a method name,
      all sorts of things like that.
    targetClass: apiContract.WebAPI
    rego: |
        nested_nodes[endpoints] with data.nodes as $node["apiContract:endpoint"]
        operations = [operation |
          endpoint = endpoints[_]
          supOperations = nested_nodes with data.nodes as  endpoint["apiContract:supportedOperation"]
          op = supOperations[_][_]
          op["apiContract:operationId"]
          operation = op
        ]

        operationIds = {operationId |
          operation = operations[_]
          operationId = operation["apiContract:operationId"]
        }
        $result = (count(operations) == count(operationIds))


  # automatically enforced by AMF
  operation-parameters:
    message: Operation parameters are unique and non-repeating.
    targetClass: apiContract.EndPoint
    rego: |
      nested_nodes[parameters] with data.nodes as $node["apiContract:parameter"]
      keys = [ desc |
        parameter = parameters[_]
        name = parameter["core:name"]
        binding = parameter["apiContract:binding"]
        desc = [name,binding]
      ]
      key_set = { e | e = keys[_] }
      $result = (count(keys) == count(key_set))


  path-params:
    message: |
      Path parameters are correct and valid.
        1. For every parameters referenced in the path string (i.e: /users/{userId}), the parameter must be defined in
           either path.parameters, or operation.parameters objects (Non standard HTTP operations will be silently
           ignored.)
        2. Every path.parameters and operation.parameters parameter must be used in the path string.
    targetClass: apiContract.EndPoint
    rego: |
      path = $node["apiContract:path"]
      pathVariables = {v | ms = regex.find_all_string_submatch_n("{([a-z0-9_]+)}", path, -1); m = ms[_]; v = m[1] }

      nested_nodes[parameters] with data.nodes as object.get($node,"apiContract:parameter",[])
      declaredPathVariables = { desc |
        parameter = parameters[_]
        name = parameter["core:name"]
        parameter["apiContract:binding"] = "path"
        desc = name
      }
      $result = (pathVariables == declaredPathVariables)


  info-contact:
    message: |
      Info object should contain contact object.

      Hopefully your API description document is so good that nobody ever needs to contact you with questions, but that
      is rarely the case. The contact object has a few different options for contact details.
    targetClass: apiContract.WebAPI
    propertyConstraints:
      core.provider:
        minCount: 1

  info-description:
    message: |
      OpenAPI object info description must be present and non-empty string.
      Examples can contain Markdown so you can really go to town with them, implementing getting started information
      like where to find authentication keys, and how to use them.
    targetClass: apiContract.WebAPI
    propertyConstraints:
      core.description:
        minCount: 1

  info-license:
    message: |
      The info object should have a license key.
      It can be hard to pick a license, so if you don't have a lawyer around you can use TLDRLegal and Choose a License
      to help give you an idea.
      How useful this is in court is not entirely known, but having a license is better than not having a license.
    targetClass: apiContract.WebAPI
    propertyConstraints:
      core.license:
        minCount: 1

  license-url:
    message: |
      Mentioning a license is only useful if people know what the license means, so add a link to the full text for
      those who need it.
    targetClass: core.License
    propertyConstraints:
      core.url:
        minCount: 1

  no-eval-in-markdown:
    message: |
      This rule protects against an edge case, for anyone bringing in description documents from third parties and using
      the parsed content rendered in HTML/JS. If one of those third parties does something shady like inject eval()
      JavaScript statements, it could lead to an XSS attack.
    targetClass: apiContract.WebAPI
    not:
      propertyConstraints:
        core.description:
          pattern: "eval\\\\("

  no-script-tags-in-markdown:
    message: |
      This rule protects against a potential hack, for anyone bringing in description documents from third parties then
      generating HTML documentation. If one of those third parties does something shady like inject <script> tags, they
      could easily execute arbitrary code on your domain, which if it's the same as your main application could be all
      sorts of terrible.
    targetClass: apiContract.WebAPI
    not:
      propertyConstraints:
        core.description:
          pattern: "<script>"

  openapi-tags:
    message: |
      OpenAPI object should have non-empty tags array.
      Why? Well, you can reference tags arbitrarily in operations, and definition is optional...
      Defining tags allows you to add more information like a description.
    targetClass: apiContract.WebAPI
    propertyConstraints:
      apiContract.tag:
        minCount: 1

  operation-default-response:
    message: Don't use default responses, provide a valid status code
    targetClass: apiContract.Response
    not:
      propertyConstraints:
        apiContract.statusCode:
          pattern: "default"

  operation-description:
    message: Operation must have a description explaining the operation functionality
    targetClass: apiContract.Operation
    propertyConstraints:
      core.description:
        minCount: 1

  operation-operationId:
    message: |
      This operation ID is essentially a reference for the operation, which can be used to visually suggest a connection
      to other operations. This is like some theoretical static HATEOAS-style referencing, but it's also used for the
      URL in some documentation systems.
      Make the value lower-hyphen-case, and try and think of a name for the action which does not relate to the HTTP
      message. Base it off the actual action being performed. create-polygon? search-by-polygon? filter-companies?
    targetClass: apiContract.Operation
    propertyConstraints:
      apiContract.operationId:
        minCount: 1
        pattern: "^[a-z0-9\\\\-]+$"

  operation-singular-tag:
    message: |
      Use just one tag for an operation, which is helpful for some documentation systems which use tags to avoid
      duplicate content.
    targetClass: apiContract.Operation
    propertyConstraints:
      apiContract.tag:
        maxCount: 1

  operation-tags:
    message: Operation should have non-empty tags array.
    targetClass: apiContract.Operation
    propertyConstraints:
      apiContract.tag:
        minCount: 1